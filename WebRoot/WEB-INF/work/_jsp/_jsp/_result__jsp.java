/*
 * JSP generated by Resin-4.0.33 (built Wed, 19 Dec 2012 10:12:03 PST)
 */

package _jsp._jsp;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;

public class _result__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html; charset=UTF-8");

    out.write(_jsp_string0, 0, _jsp_string0.length);
    
String path = request.getContextPath();
            String basePath;
            if (request.getServerPort() == 80) {
                basePath = request.getScheme() + "://"
                        + request.getServerName() + path;
            } else {
                basePath = request.getScheme() + "://"
                        + request.getServerName() + ":"
                        + request.getServerPort() + path;
            }

    out.write(_jsp_string1, 0, _jsp_string1.length);
    out.print((basePath));
    _caucho_expr_0.print(out, _jsp_env, false);
    out.write(_jsp_string2, 0, _jsp_string2.length);
    out.print((basePath));
    out.write(_jsp_string3, 0, _jsp_string3.length);
    out.print((basePath));
    _caucho_expr_0.print(out, _jsp_env, false);
    out.write(_jsp_string4, 0, _jsp_string4.length);
    out.print((basePath));
    _caucho_expr_0.print(out, _jsp_env, false);
    out.write(_jsp_string5, 0, _jsp_string5.length);
    out.print((basePath));
    _caucho_expr_0.print(out, _jsp_env, false);
    out.write(_jsp_string6, 0, _jsp_string6.length);
    out.print((basePath));
    _caucho_expr_0.print(out, _jsp_env, false);
    out.write(_jsp_string7, 0, _jsp_string7.length);
    out.print((basePath));
    _caucho_expr_0.print(out, _jsp_env, false);
    out.write(_jsp_string8, 0, _jsp_string8.length);
    out.print((basePath));
    out.write(_jsp_string9, 0, _jsp_string9.length);
    out.print((basePath));
    out.write(_jsp_string10, 0, _jsp_string10.length);
  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != 516923625575712947L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("jsp/result.jsp"), -4575434166700205907L, false);
    _caucho_depends.add(depend);
    depend = new com.caucho.vfs.Depend(appDir.lookup("jsp/taglibs.jsp"), 5578382429526907488L, false);
    _caucho_depends.add(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      manager.addTaglibFunctions(_jsp_functionMap, "c", "http://java.sun.com/jsp/jstl/core");
      manager.addTaglibFunctions(_jsp_functionMap, "fmt", "http://java.sun.com/jsp/jstl/fmt");
      manager.addTaglibFunctions(_jsp_functionMap, "fn", "http://java.sun.com/jsp/jstl/functions");
      manager.addTaglibFunctions(_jsp_functionMap, "sec", "http://www.springframework.org/security/tags");
      manager.addTaglibFunctions(_jsp_functionMap, "form", "http://www.springframework.org/tags/form");
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
      _caucho_expr_0 = com.caucho.jsp.JspUtil.createExpr(pageContext.getELContext(), "${basePath}");
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }
  private static com.caucho.el.Expr _caucho_expr_0;

  private final static char []_jsp_string3;
  private final static char []_jsp_string1;
  private final static char []_jsp_string5;
  private final static char []_jsp_string2;
  private final static char []_jsp_string9;
  private final static char []_jsp_string4;
  private final static char []_jsp_string7;
  private final static char []_jsp_string0;
  private final static char []_jsp_string10;
  private final static char []_jsp_string6;
  private final static char []_jsp_string8;
  static {
    _jsp_string3 = "/js/public.js\"></script>\r\n<script type=\"text/javascript\"\r\n	src=\"".toCharArray();
    _jsp_string1 = "\r\n\r\n\r\n\r\n\r\n\r\n<meta http-equiv=\"pragma\" content=\"no-cache\" />\r\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\r\n<meta http-equiv=\"expires\" content=\"0\">\r\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE8\" />\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n<script type=\"text/javascript\"\r\n	src=\"".toCharArray();
    _jsp_string5 = "/js/jquery.dynatree.min.js\"></script>\r\n\r\n\r\n<link type=\"text/css\" rel=\"stylesheet\"\r\n	href=\"".toCharArray();
    _jsp_string2 = "/js/jquery-1.7.2.min.js\"></script>\r\n<script type=\"text/javascript\" src=\"".toCharArray();
    _jsp_string9 = "/skin/dynatree/\",\r\n			initAjax : {\r\n				url : '".toCharArray();
    _jsp_string4 = "/js/jquery-ui-1.8.23.custom.min.js\"></script>\r\n<script type=\"text/javascript\"\r\n	src=\"".toCharArray();
    _jsp_string7 = "/skin/easydialog/easydialog.css\" />\r\n<link type=\"text/css\" rel=\"stylesheet\"\r\n	href=\"".toCharArray();
    _jsp_string0 = "\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n".toCharArray();
    _jsp_string10 = "/compare/jsontree'\r\n			},\r\n			strings : {\r\n				loading : \"Loading\u2026\",\r\n				loadError : \"Load error!\"\r\n			},\r\n			onPostInit : function(isReloading, isError) {\r\n				if (isError) {\r\n					alert(\"\u51fa\u9519\u5566!!!\u770b\u540e\u53f0\u65e5\u5fd7\u3002\u91cd\u65b0\u52a0\u8f7d\u8bf7\u6309F5\");\r\n				}\r\n			}\r\n\r\n		});\r\n	});\r\n</script>\r\n</html>".toCharArray();
    _jsp_string6 = "/skin/dynatree/ui.dynatree.css\" />\r\n<link type=\"text/css\" rel=\"stylesheet\"\r\n	href=\"".toCharArray();
    _jsp_string8 = "/skin/main.css\" />\r\n\r\n<title>\u6bd4\u8f83\u7ed3\u679c</title>\r\n</head>\r\n<body>\r\n	<div style=\"width: auto; height:auto\" id=\"tree\" style=\"display:none\"></div>\r\n</body>\r\n<script type=\"text/javascript\">\r\n	//Attach the dynatree widget to an existing <div id=\"tree\"> element\r\n	// and pass the tree options as an argument to the dynatree() function:\r\n	$(function() {\r\n		$(\"#tree\").dynatree({\r\n			onCreate : function(node, span) {\r\n				//alert($(node.span).find('img'));\r\n				//$(node.span).find('a').after($('<img src=\"/skin/dynatree/equal.png\" />'));\r\n				//node.data.title='<img src=\"/skin/dynatree/equal.png\" />'+node.data.title;\r\n				//$(node.span).css({'background-image':'/skin/dynatree/equal.png',position:'absolute'})\r\n				var source = node.data.sourceContent;\r\n				var target = node.data.targetContent;\r\n				var isFolder = node.data.isFolder;\r\n\r\n				var diffContent = \"<br/>\";\r\n				//if (isFolder=='false') {\r\n				//alert('isLeaf');\r\n				if (source != null) {\r\n					diffContent += source;\r\n				}\r\n				if (target != null) {\r\n					diffContent += \"<br/>\" + target;\r\n				}\r\n\r\n				$(diffContent).appendTo(node.span);\r\n				//}\r\n			},\r\n			onPostInit : function(dtnode) {\r\n				//alert('init');\r\n				//node.data.title='<img src=\"/skin/dynatree/equal.png\" />'+node.data.title;\r\n				//$(node.span).find('img').after($('<img src=\"/skin/dynatree/equal.png\" />'));\r\n			},\r\n			imagePath : \"".toCharArray();
  }
}
